// scripts/build.js
const fs = require('fs');
const path = require('path');

const distDir = path.resolve(__dirname, '../dist');
const srcDir = path.resolve(__dirname, '../');

// 1. Clean and create the dist directory
if (fs.existsSync(distDir)) {
    fs.rmSync(distDir, { recursive: true, force: true });
}
fs.mkdirSync(distDir, { recursive: true });

// 2. Define files and directories to copy
const itemsToCopy = [
    'components',
    'contexts',
    'hooks',
    'pages',
    'utils',
    'App.tsx',
    'constants.tsx',
    'index.html',
    'index.tsx',
    'metadata.json',
    'README.md',
    'types.ts'
];

// 3. Copy all necessary files and folders to dist
itemsToCopy.forEach(item => {
    const srcPath = path.join(srcDir, item);
    const destPath = path.join(distDir, item);
    if (fs.existsSync(srcPath)) {
        fs.cpSync(srcPath, destPath, { recursive: true });
    } else {
        console.warn(`Warning: Source item not found, skipping: ${srcPath}`);
    }
});

// 4. Create env.js with the API Key
// This allows the frontend to access process.env.API_KEY, which is set in the Netlify UI.
const apiKey = process.env.API_KEY || '';
if (!apiKey) {
    console.warn('\\nWARNING: API_KEY environment variable not set.');
    console.warn('The application may not function correctly without it.\\n');
}
const envScriptContent = `
// This file is generated by the build script and should not be edited manually.
// It injects environment variables from the build environment into the browser.
window.process = {
  env: {
    API_KEY: "${apiKey}"
  }
};
`;
fs.writeFileSync(path.join(distDir, 'env.js'), envScriptContent.trim());

// 5. Inject the env.js script into index.html
const indexHtmlPath = path.join(distDir, 'index.html');
try {
    let indexHtmlContent = fs.readFileSync(indexHtmlPath, 'utf8');
    const scriptTag = '<script src="./env.js"></script>';
    const mainModuleScript = '<script type="module" src="./index.tsx"></script>';

    if (indexHtmlContent.includes(mainModuleScript)) {
        indexHtmlContent = indexHtmlContent.replace(mainModuleScript, `${scriptTag}\\n    ${mainModuleScript}`);
        fs.writeFileSync(indexHtmlPath, indexHtmlContent, 'utf8');
        console.log('Successfully injected env.js script into index.html.');
    } else {
        throw new Error('Could not find main module script tag in index.html to inject env script.');
    }
} catch (error) {
    console.error('Error modifying index.html:', error);
    process.exit(1); // Exit with error
}

console.log('\\nBuild process completed. The "dist" directory is ready for deployment.');
